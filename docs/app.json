[{"name": "app.py", "content": "import plotly.express as px\nimport seaborn as sns\nfrom shiny import reactive, render, req\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom shinywidgets import render_widget\nimport palmerpenguins\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Penguin Data - Brendan\", fillable=True)\n\n# sidebar\nwith ui.sidebar(bg=\"#f8f8f8\", open='open'):\n    ui.h2(\"Sidebar\")\n    ui.input_selectize(\"selected_attribute\", \"Selected_attribute\",\n                       [\"bill_length_mm\", \"bill_depth_mm\", \n                        \"flipper_length_mm\", \"body_mass_g\"])\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly_bin_count\", 50)\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn_bin_count\", 1, 100, 50)\n    ui.input_checkbox_group(\"selected_species_list\", \"Selected_species_list\", \n                            [\"Adelie\", \"Gentoo\", \"Chinstrap\"], \n                            selected = [\"Adelie\", \"Gentoo\", \"Chinstrap\"], inline = False)\n    ui.input_checkbox_group(\"selected_island_list\", \"Selected_island_list\", \n                            ['Torgersen', 'Biscoe', 'Dream'], \n                            selected = ['Torgersen', 'Biscoe', 'Dream'], inline = False)\n    ui.hr()\n    ui.a(\"GitHub\", href = \"https://github.com/reedbc1/cintel-02-data/tree/main\", target = \"_blank\")\n\n\n# create two columns\nwith ui.layout_columns():\n    \n    # show data\n    with ui.navset_card_pill(id=\"tab1\"):  \n        with ui.nav_panel(\"Data Table\"):\n            @render.data_frame  \n            def penguins_data_table():\n                return render.DataTable(penguins)\n        with ui.nav_panel(\"Data Grid\"):\n            @render.data_frame  \n            def penguins_data_grid():\n                return render.DataGrid(penguins)\n                \n    # show graphs\n    with ui.navset_card_pill(id=\"tab2\"):  \n        \n        with ui.nav_panel(\"Plotly Histogram\"):\n            @render_widget  \n            def plot_hist():  \n                mass_fig = px.histogram(\n                    data_frame=filtered_data(),\n                    x=input.selected_attribute(),\n                    color = \"species\",\n                    nbins=input.plotly_bin_count(),\n                ).update_layout(\n                    title={\"text\": \"Penguin Stats\", \"x\": 0.5},\n                    yaxis_title=\"Count\",\n                    xaxis_title=input.selected_attribute(),\n                )\n                return mass_fig\n        \n        with ui.nav_panel(\"Seaborn Histogram\"):\n            @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n            def plot():  \n                ax = sns.histplot(data=filtered_data(), x=\"body_mass_g\", \n                                  hue = \"species\", bins=input.seaborn_bin_count())  \n                ax.set_title(\"Palmer Penguins\")\n                ax.set_xlabel(\"Mass (g)\")\n                ax.set_ylabel(\"Count\")\n                return ax \n\n        with ui.nav_panel(\"Scatterplot\"):\n            @render_widget  \n            def plot_scatter():  \n                plotly_fig = px.scatter(\n                    data_frame=filtered_data(),\n                    x=\"body_mass_g\",\n                    color = \"species\"\n                ).update_layout(\n                    title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n                    yaxis_title=\"Count\",\n                    xaxis_title=\"Body Mass (g)\",\n                )\n    \n                return plotly_fig  \n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n@reactive.calc\ndef filtered_data():\n    req(input.selected_species_list())\n    req(input.selected_island_list())\n    \n    isSpeciesMatch = penguins[\"species\"].isin(input.selected_species_list())\n    isIslandMatch = penguins[\"island\"].isin(input.selected_island_list())\n    filtered_df_and = penguins[isSpeciesMatch & isIslandMatch]\n    return filtered_df_and\n", "type": "text"}]